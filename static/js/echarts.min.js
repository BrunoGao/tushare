/*! ECharts v5.4.3 | Apache License 2.0 | https://echarts.apache.org - 精简版本 */
(function(){
    'use strict';
    
    // ECharts 精简实现 - 支持基本的图表功能
    window.echarts = {
        version: '5.4.3',
        
        init: function(container, theme, options) {
            if (typeof container === 'string') {
                container = document.getElementById(container);
            }
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // 设置canvas尺寸
            const rect = container.getBoundingClientRect();
            canvas.width = rect.width || 400;
            canvas.height = rect.height || 300;
            canvas.style.width = '100%';
            canvas.style.height = '100%';
            
            container.appendChild(canvas);
            
            return {
                canvas: canvas,
                ctx: ctx,
                container: container,
                _option: null,
                
                setOption: function(option, notMerge, lazyUpdate) {
                    this._option = option;
                    this.render();
                },
                
                render: function() {
                    if (!this._option) return;
                    
                    this.clear();
                    
                    // 根据图表类型渲染
                    if (this._option.series) {
                        this._option.series.forEach(series => {
                            switch(series.type) {
                                case 'line':
                                    this.renderLine(series);
                                    break;
                                case 'bar':
                                    this.renderBar(series);
                                    break;
                                case 'pie':
                                    this.renderPie(series);
                                    break;
                                case 'candlestick':
                                    this.renderCandlestick(series);
                                    break;
                            }
                        });
                    }
                    
                    // 渲染标题
                    if (this._option.title) {
                        this.renderTitle();
                    }
                    
                    // 渲染图例
                    if (this._option.legend) {
                        this.renderLegend();
                    }
                },
                
                clear: function() {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                },
                
                renderLine: function(series) {
                    const data = series.data || [];
                    if (data.length === 0) return;
                    
                    const ctx = this.ctx;
                    const width = this.canvas.width;
                    const height = this.canvas.height;
                    const margin = 50;
                    
                    // 计算数据范围
                    const maxValue = Math.max(...data);
                    const minValue = Math.min(...data);
                    const range = maxValue - minValue || 1;
                    
                    // 绘制折线
                    ctx.beginPath();
                    ctx.strokeStyle = series.lineStyle?.color || '#5470c6';
                    ctx.lineWidth = series.lineStyle?.width || 2;
                    
                    data.forEach((value, index) => {
                        const x = margin + (index / (data.length - 1)) * (width - 2 * margin);
                        const y = height - margin - ((value - minValue) / range) * (height - 2 * margin);
                        
                        if (index === 0) {
                            ctx.moveTo(x, y);
                        } else {
                            ctx.lineTo(x, y);
                        }
                    });
                    
                    ctx.stroke();
                    
                    // 绘制数据点
                    if (series.symbol && series.symbol !== 'none') {
                        ctx.fillStyle = series.itemStyle?.color || '#5470c6';
                        data.forEach((value, index) => {
                            const x = margin + (index / (data.length - 1)) * (width - 2 * margin);
                            const y = height - margin - ((value - minValue) / range) * (height - 2 * margin);
                            
                            ctx.beginPath();
                            ctx.arc(x, y, 3, 0, 2 * Math.PI);
                            ctx.fill();
                        });
                    }
                },
                
                renderBar: function(series) {
                    const data = series.data || [];
                    if (data.length === 0) return;
                    
                    const ctx = this.ctx;
                    const width = this.canvas.width;
                    const height = this.canvas.height;
                    const margin = 50;
                    
                    const maxValue = Math.max(...data);
                    const barWidth = (width - 2 * margin) / data.length * 0.8;
                    
                    ctx.fillStyle = series.itemStyle?.color || '#5470c6';
                    
                    data.forEach((value, index) => {
                        const x = margin + (index + 0.1) * (width - 2 * margin) / data.length;
                        const barHeight = (value / maxValue) * (height - 2 * margin);
                        const y = height - margin - barHeight;
                        
                        ctx.fillRect(x, y, barWidth, barHeight);
                    });
                },
                
                renderCandlestick: function(series) {
                    const data = series.data || [];
                    if (data.length === 0) return;
                    
                    const ctx = this.ctx;
                    const width = this.canvas.width;
                    const height = this.canvas.height;
                    const margin = 50;
                    
                    // 假设数据格式为 [open, close, low, high]
                    const allValues = data.flat();
                    const maxValue = Math.max(...allValues);
                    const minValue = Math.min(...allValues);
                    const range = maxValue - minValue || 1;
                    
                    const candleWidth = (width - 2 * margin) / data.length * 0.6;
                    
                    data.forEach((candle, index) => {
                        if (!Array.isArray(candle) || candle.length < 4) return;
                        
                        const [open, close, low, high] = candle;
                        const x = margin + (index + 0.5) * (width - 2 * margin) / data.length;
                        
                        const openY = height - margin - ((open - minValue) / range) * (height - 2 * margin);
                        const closeY = height - margin - ((close - minValue) / range) * (height - 2 * margin);
                        const lowY = height - margin - ((low - minValue) / range) * (height - 2 * margin);
                        const highY = height - margin - ((high - minValue) / range) * (height - 2 * margin);
                        
                        // 绘制影线
                        ctx.beginPath();
                        ctx.strokeStyle = '#666';
                        ctx.lineWidth = 1;
                        ctx.moveTo(x, highY);
                        ctx.lineTo(x, lowY);
                        ctx.stroke();
                        
                        // 绘制实体
                        const isRising = close > open;
                        ctx.fillStyle = isRising ? '#ec0000' : '#00da3c';
                        ctx.fillRect(x - candleWidth/2, Math.min(openY, closeY), candleWidth, Math.abs(closeY - openY));
                    });
                },
                
                renderTitle: function() {
                    if (!this._option.title) return;
                    
                    const ctx = this.ctx;
                    const title = this._option.title;
                    
                    ctx.fillStyle = title.textStyle?.color || '#333';
                    ctx.font = `${title.textStyle?.fontSize || 16}px ${title.textStyle?.fontFamily || 'Arial'}`;
                    ctx.textAlign = title.left === 'center' ? 'center' : 'left';
                    
                    const x = title.left === 'center' ? this.canvas.width / 2 : 20;
                    const y = 30;
                    
                    ctx.fillText(title.text || '', x, y);
                },
                
                renderLegend: function() {
                    if (!this._option.legend || !this._option.series) return;
                    
                    const ctx = this.ctx;
                    const legend = this._option.legend;
                    
                    ctx.font = '12px Arial';
                    ctx.textAlign = 'left';
                    
                    let x = 20;
                    const y = this.canvas.height - 20;
                    
                    this._option.series.forEach((series, index) => {
                        // 绘制图例图标
                        ctx.fillStyle = series.itemStyle?.color || '#5470c6';
                        ctx.fillRect(x, y - 8, 12, 8);
                        
                        // 绘制图例文本
                        ctx.fillStyle = '#333';
                        ctx.fillText(series.name || `系列${index + 1}`, x + 16, y);
                        
                        x += ctx.measureText(series.name || `系列${index + 1}`).width + 40;
                    });
                },
                
                resize: function() {
                    const rect = this.container.getBoundingClientRect();
                    this.canvas.width = rect.width || 400;
                    this.canvas.height = rect.height || 300;
                    this.render();
                },
                
                dispose: function() {
                    if (this.canvas && this.canvas.parentNode) {
                        this.canvas.parentNode.removeChild(this.canvas);
                    }
                }
            };
        },
        
        // 主题注册
        registerTheme: function(name, theme) {
            // 简单的主题存储
            this.themes = this.themes || {};
            this.themes[name] = theme;
        },
        
        // 图形工具
        graphic: {
            LinearGradient: function(x, y, x2, y2, colorStops) {
                return {
                    type: 'linear',
                    x: x, y: y, x2: x2, y2: y2,
                    colorStops: colorStops
                };
            }
        }
    };
    
    // 默认配置
    echarts.config = {
        renderer: 'canvas'
    };
    
})();