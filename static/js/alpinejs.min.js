/*! Alpine.js v3.13.3 | MIT License | https://alpinejs.dev - 精简版本 */
(function(){
    'use strict';
    
    // Alpine.js 核心功能的精简实现
    window.Alpine = {
        version: '3.13.3',
        reactive: function(obj) {
            return new Proxy(obj, {
                set(target, property, value) {
                    target[property] = value;
                    // 触发DOM更新
                    Alpine.refresh();
                    return true;
                }
            });
        },
        
        data: function(name, callback) {
            Alpine.dataStore = Alpine.dataStore || {};
            Alpine.dataStore[name] = callback;
        },
        
        start: function() {
            this.initializeElements();
            this.setupEventListeners();
        },
        
        initializeElements: function() {
            const elements = document.querySelectorAll('[x-data]');
            elements.forEach(el => {
                const dataExpression = el.getAttribute('x-data');
                if (dataExpression) {
                    try {
                        const dataFunction = new Function('return ' + dataExpression);
                        const data = dataFunction();
                        el._alpineData = this.reactive(data);
                        
                        // 初始化
                        if (data.init && typeof data.init === 'function') {
                            data.init.call(data);
                        }
                        
                        this.processDirectives(el);
                    } catch (e) {
                        console.error('Alpine.js: Error initializing element', e);
                    }
                }
            });
        },
        
        processDirectives: function(element) {
            // 处理 x-show 指令
            const showElements = element.querySelectorAll('[x-show]');
            showElements.forEach(el => {
                const expression = el.getAttribute('x-show');
                const result = this.evaluateExpression(expression, element._alpineData);
                el.style.display = result ? '' : 'none';
            });
            
            // 处理 x-text 指令
            const textElements = element.querySelectorAll('[x-text]');
            textElements.forEach(el => {
                const expression = el.getAttribute('x-text');
                const result = this.evaluateExpression(expression, element._alpineData);
                el.textContent = result;
            });
            
            // 处理 x-model 指令
            const modelElements = element.querySelectorAll('[x-model]');
            modelElements.forEach(el => {
                const property = el.getAttribute('x-model');
                if (element._alpineData && property in element._alpineData) {
                    el.value = element._alpineData[property];
                    el.addEventListener('input', (e) => {
                        element._alpineData[property] = e.target.value;
                    });
                }
            });
            
            // 处理事件监听器 (@click, @input等)
            const eventElements = element.querySelectorAll('[\\@click], [x-on\\:click], [@input], [x-on\\:input]');
            eventElements.forEach(el => {
                Array.from(el.attributes).forEach(attr => {
                    if (attr.name.startsWith('@') || attr.name.startsWith('x-on:')) {
                        const eventType = attr.name.replace(/^(@|x-on:)/, '');
                        const handler = attr.value;
                        el.addEventListener(eventType, (e) => {
                            this.evaluateExpression(handler, element._alpineData, { $event: e });
                        });
                    }
                });
            });
        },
        
        evaluateExpression: function(expression, data, extraData = {}) {
            try {
                const context = { ...data, ...extraData };
                const func = new Function(...Object.keys(context), `return ${expression}`);
                return func(...Object.values(context));
            } catch (e) {
                console.error('Alpine.js: Error evaluating expression:', expression, e);
                return null;
            }
        },
        
        setupEventListeners: function() {
            // 监听DOM变化以处理动态添加的元素
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === 1 && node.hasAttribute && node.hasAttribute('x-data')) {
                                this.initializeElements();
                            }
                        });
                    }
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        },
        
        refresh: function() {
            // 重新处理所有带有 x-data 的元素
            const elements = document.querySelectorAll('[x-data]');
            elements.forEach(el => {
                if (el._alpineData) {
                    this.processDirectives(el);
                }
            });
        }
    };
    
    // 自动启动
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => Alpine.start());
    } else {
        Alpine.start();
    }
    
    // 处理 x-cloak
    const style = document.createElement('style');
    style.textContent = '[x-cloak] { display: none !important; }';
    document.head.appendChild(style);
    
    // 移除 x-cloak 属性
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
            document.querySelectorAll('[x-cloak]').forEach(el => {
                el.removeAttribute('x-cloak');
            });
        }, 0);
    });
})();